python ---> 알고리즘

sw 역량테스트 im형 취득 ---> a형 준비

3.9 ---> IDE인 pycharm 버전

웹 프레임워크 백엔드 django ---> python 기반

======================================

git 설치

1. git(로컬저장소) --- github, gitlab(원격저장소)

2. bash를 쓰려고

Interface(2종류) --- 리모컨
1. GUI(graphic user interface)

2. TUI(Text User Interface)
그런데 TUI라는 말 보다는
Command Line Interface --- CLI

GUI : Windows GUI
CLI : cmd ---> 윈도우 기반, powershell, bash ---> 리눅스 기반

왜 개발자들은 bash를 더 많이 쓸까?

bash는 위, 아래 방향키로 전에 입력했던 명령어들 재사용
bash는 tab키를 이용해서 자동완성

: 간편한 명령어, 편리한 개발환경

=============================================

git 쓸때 GUI로 다뤄야 하나요? CLI로 다뤄야 하나요?
---> 그때 그때 다르다 둘다 써야한다.
대부분은 CLI를 쓴지만, diff, graph는 GUI를 쓴다.

- CLI의 장점 1 : Commit 명령어 1초면 끝 (GUI는 10초걸린다)
- 2 : 20년전 배웠으면 지금도 쓰고 있고, 앞으로도 쓸것이다.
- GUI의 장점 1 : 보기편하고, 친숙하고, 기능도 다있다.
- 2. : diff 파일 비교, Graph (시각적이고 복잡한 분석) 훨씬 보기좋다.


============================================

IDE : 통합 개발 환경

VScode : IDE가 아니다
---> 텍스트 에디터(그런데 익스텐션을 이용해서 마치 IDE처럼 사용 가능)

IDE 
C# : Visual Studio
python : PyCharm,  쥬피터노트북
Java : IntelliJ

=============================================

URL : "https://" 로 시작하는 웹주소
API : Application Programming Interface (수단), 클라언트가 서버에게 요청하는 수단
API키는 서버 개발자가 정한다

=============================================

나는 개발자로서 프로그램을 만들거야!!

1. 맨땅에 해딩(처음부터 코딩)

2. 소스코드를 다운받아서 수정하는 방법
---> Framework : 이미 짜여진 소스코드
python : Django /  Flask
Java : Spring Boot / Spring MVC (아시아권에서 많이 쓴다.)
C# : ASP NET Core (주로 미국에서만 쓴다)
JavaScript : Express(미국에서 엄청 많이 쓴다)

======================================

Minnimal GNU for Windows
:  윈도우에서 리눅스에서 쓰는 툴들을 쓸수있게 가볍가 만든 프로젝트

~ : Home directory
cd ~ : 홈 디렉토리로 가기
cd - : 뒤로가기
cd .. : 상위 디렉토리로 가기

==============================================

git 시작
git init

git 종료
1. 숨긴항목 .git 삭제하기
2. rm -rf .git

파일 생성
--->   touch a.txt
파일 삭제
--->   rm a.txt
현재 디렉토리의 파일 목록 확인
--->   ls
디렉토리 생성
--->   mkdir new_folder
디렉토리 삭제
--->   rm -r new_folder
작업중인 디렉토리 변경
--->   cd

=============================================

git add .  :  모든 파일 add
git status  :    commit할 준비가 되어있나?

commit 작성자 설정
git config --global user.name "장상호"
git config --global user.email "sangho.jang@mincoding.co.kr"

git commit -m "first_practice"
git log

git remote add origin https://github.com/shjang89/7_11_practice.git
-> 로컬 저장소에서 원격 저장소의 주소를 추가하겠다.
-> origin은 원격저장소의 별칭, 그 뒷부분은 URL
git remote -v

git push origin +master

*주의
.gitignore
---> add 하지 않을 파일명을 작성한다.(예 api key, 가상환경 등등..)

gitignore.io : gitignore 작성 제공 사이트(프레임워크 등)

* pull 과 clone 차이

만약 새로운 환경에서 github에 있는 프로젝를 받을때
clone
---> git clone https://github.com/shjang89/7_11_practice.git

이미 로컬에서 작업 중이고, 원격 저장소에 업데이트가 있는 경우
pull
---> git pull origin master


===========================================

오늘 ssafy 강의실에서 push ---> 집에서 clone ---> 다음 날 ssafy강의실에서
변경사항들 push(업데이트) ---> 집에서 pull

=============================================

ssafy 강의실에서
자리를 바꾸면 제어판의 자격증명관리자에서 github 삭제 후 처음부터 진행

===================================================

html(= hyper text markup language)

markdown

여기서 m은 같은 약자이다. 

공통점 : 로직이 작성되지 않는다.

mardown을 왜 배우는지?
github에서 README.md 파일로 활용 --> 프로젝트에 대한 설명을 문서화 --> 가독성, 편의성

================================================================

런타임

닌텐도 팩
실행머신 <---- 런타임 

JavaScript로 만든 게임 App
런타임 <----- Node.js

Python으로 만든 App
런타임 <---- CPython, Pypy(CPython 에서 속도를 올린 런타임)

Java로 만든 게임 App
런타임 <---- JVM(Java Virtual Machine)

C++, C 로 만든 App
런타임이 없어요~~~~~~